/*
 * Renderer Models. The MIT License.
 * Copyright (c) 2022 rlkraft@pnw.edu
 * See LICENSE for details.
*/

package renderer.models_Tex;

import renderer.scene.*;
import renderer.scene.primitives.*;
import renderer.scene.util.MeshMaker;

/**
   Create a textured model of a sphere centered at the origin.
<p>
   See <a href="https://en.wikipedia.org/wiki/Sphere" target="_top">
                https://en.wikipedia.org/wiki/Sphere</a>
<p>
   A sphere of radius {@code r} is the surface of revolution generated by
   revolving a half-circle in the xy-plane with radius {@code r} and center
   {@code (0,0,0)} around the y-axis.
<p>
   Here are parametric equations for the right half-circle in the xy-plane with
   radius {@code r} and center {@code (0,0,0)}, parameterized from the top down.
   <pre>{@code
      x(phi) = r * sin(phi)  \
      y(phi) = r * cos(phi)   |-  0 <= phi <= PI
      z(phi) = 0             /
   }</pre>
   Here is the 3D rotation matrix that rotates around the y-axis
   by {@code theta} radians, {@code 0 <= theta <= 2*PI}
   <pre>{@code
      [ cos(theta)   0   sin(theta)]
      [     0        1       0     ]
      [-sin(theta)   0   cos(theta)]
   }</pre>
   If we multiply the rotation matrix with the half-circle
   parameterization, we get a parameterization of the sphere.
   <pre>{@code
      [ cos(theta)   0   sin(theta)]   [r * sin(phi)]
      [     0        1       0     ] * [r * cos(phi)]
      [-sin(theta)   0   cos(theta)]   [     0      ]

      = ( r * sin(phi) * cos(theta).    \
          r * cos(phi),                  |- 0<=theta<=2*PI,  0<=phi<=PI
         -r * sin(phi) * sin(theta) )   /
   }</pre>
   See
     <a href="https://en.wikipedia.org/wiki/Sphere#Equations_in_three-dimensional_space" target="_top">
              https://en.wikipedia.org/wiki/Sphere#Equations_in_three-dimensional_space</a>

   @see SphereSector
*/
public class Sphere extends Model implements MeshMaker
{
   public final Texture texture;
   public final double r;
   public final int n;
   public final int k;

   /**
      Create a textured sphere of radius 1 centered at the origin.

      @param texture  {@link Texture} to use with this {@link Model}
   */
   public Sphere(final Texture texture)
   {
      this(texture, 1, 15, 16);
   }


   /**
      Create a textured sphere of radius {@code r} centered at the origin.

      @param texture  {@link Texture} to use with this {@link Model}
      @param r  radius of the sphere
   */
   public Sphere(final Texture texture, final double r)
   {
      this(texture, r, 15, 16);
   }


   /**
      Create a textured sphere of radius {@code r} centered at the origin.
   <p>
      The last two parameters determine the number of half circles
      of longitude and the number of circles of latitude in the model.
   <p>
      If there are {@code k} half circles of longitude, then each circle
      of latitude will have {@code k} line segments.
      If there are {@code n} circles of latitude, then each half circle
      of longitude will have {@code n+1} line segments.
   <p>
      There must be at least three half circles of longitude and
      at least one circle of latitude.

      @param texture  {@link Texture} to use with this {@link Model}
      @param r  radius of the sphere
      @param n  number of circles of latitude
      @param k  number of half circles of longitude
      @throws IllegalArgumentException if {@code n} is less than 1
      @throws IllegalArgumentException if {@code k} is less than 3
   */
   public Sphere(final Texture texture,
                 final double r, final int n, final int k)
   {
      super(String.format("Sphere(%.2f,%d,%d)", r, n, k));

      if (n < 1)
         throw new IllegalArgumentException("n must be greater than 0");
      if (k < 3)
         throw new IllegalArgumentException("k must be greater than 2");

      this.texture = texture;
      this.r = r;
      this.n = n;
      this.k = k;

      // Add the given texture to this model.
      addTexture(texture);

      // Create the sphere's geometry.

      final double deltaPhi = Math.PI / (n + 1),
                   deltaTheta = (2 * Math.PI) / k;

      // An array of vertices to be used to create triangles.
      final Vertex[][] v = new Vertex[n][k+1];

      // An array of texture coordinates.
      final TexCoord[][] tc = new TexCoord[n][k+1];

      // Create all the vertices.
      for (int j = 0; j < k+1; ++j) // choose an angle of longitude
      {
         final double c1 = Math.cos(j * deltaTheta),
                      s1 = Math.sin(j * deltaTheta);
         for (int i = 0; i < n; ++i) // choose an circle of latitude
         {
            final double c2 = Math.cos(deltaPhi + i * deltaPhi),
                         s2 = Math.sin(deltaPhi + i * deltaPhi);
            v[i][j] = new Vertex(r * s2 * s1,
                                 r * c2,
                                 r * s2 * c1);
         }
      }
      final Vertex northPole = new Vertex(0,  r, 0),
                   southPole = new Vertex(0, -r, 0);

      // Create all the texture coordinates.
      for (int j = 0; j < k+1; ++j) // choose an angle of longitude
      {
         for (int i = 0; i < n; ++i) // choose an circle of latitude
         {
            tc[i][j] = new TexCoord(j/(double)k, 1.0 - (i + 1.0)/(n + 1.0));
         }
      }
      final TexCoord northPoleTC = new TexCoord(0.5, 1.0),
                     southPoleTC = new TexCoord(0.5, 0.0);

      // Add all of the vertices and texture coordinates to this model.
      for (int i = 0; i < n; ++i)
      {
         for (int j = 0; j < k+1; ++j)
         {
            addVertex( v[i][j] );
            addTextureCoord( tc[i][j] );
         }
      }
      addVertex(northPole,
                southPole);
      addTextureCoord(northPoleTC,
                      southPoleTC);
      final int northPoleIndex = n * (k+1),
                southPoleIndex = northPoleIndex + 1;


      // Create all the triangle strips between the top and bottom triangle fans.
      for (int i = 0; i < n - 1; ++i)
      {
         for (int j = 0; j < k; ++j)
         {  //                        v[i][j]    v[i+1][j+1]   v[i][j+1]
            addPrimitive(new Triangle(i*(k+1)+j, (i+1)*(k+1)+j+1, i*(k+1)+j+1,
                                      i*(k+1)+j, (i+1)*(k+1)+j+1, i*(k+1)+j+1,
            //                        tc[i][j]   tc[i+1][j+1]  tc[i][j+1]
                                      0)); // texture index

            //                         v[i+1][j+1]   v[i][j]   v[i+1][j]
            addPrimitive(new Triangle(((i+1)*(k+1))+j+1, i*(k+1)+j, (i+1)*(k+1)+j,
                                      ((i+1)*(k+1))+j+1, i*(k+1)+j, (i+1)*(k+1)+j,
            //                         tc[i+1][j+1]  tc[i][j]  tc[i+1][j]
                                      0)); // texture index
         }
      }

      // Create the triangle fan at the top.
      for (int j = 0; j < k; ++j)
      {  //                                       v[0][j]  v[0][j+1]
         addPrimitive(new Triangle(northPoleIndex,  j,     j+1,
                                   northPoleIndex,  j,     j+1,
         //                                       tc[0][j] tc[0][j+1]
                                   0)); // texture index
      }

      // Create the triangle fan at the bottom.
      for (int j = 0; j < k; ++j)
      {  //                                          v[n-1][j+1]    v[n-1][j]
         addPrimitive(new Triangle(southPoleIndex, (n-1)*(k+1)+j+1, (n-1)*(k+1)+j,
                                   southPoleIndex, (n-1)*(k+1)+j+1, (n-1)*(k+1)+j,
         //                                          tc[n-1][j+1]   tc[n-1][j]
                                   0)); // texture index
      }
   }



   // Implement the MeshMaker interface (three methods).
   @Override public int getHorzCount() {return n;}

   @Override public int getVertCount() {return k;}

   @Override
   public Sphere remake(final int n, final int k)
   {
      return new Sphere(this.texture, this.r, n, k);
   }
}//Sphere
